//
//  GraphView.swift
//  KotlinIOS
//
//  Created by Lee, Mark on 11/11/19.
//  Copyright Â© 2019 Kinsight. All rights reserved.
//

import SwiftUI

struct GraphView: View {
    var body: some View {
        ZStack {
            Path { path in
                let width: CGFloat = 380
                let height: CGFloat = 250
                
                path.move(to: CGPoint(x: Double(20.0), y: Double(0.0)))
                path.addLine(to: CGPoint(x: Double(20.0+width), y: Double(0.0)))
                path.addLine(to: CGPoint(x: Double(20.0+width), y: Double(height)))
                path.addLine(to: CGPoint(x: Double(20.0), y: Double(height)))
            }
            .fill(Color(red: 47.0/255.0, green: 55.0/255.0, blue: 69.0/255.0))
             
            Path { path in
                let width: CGFloat = 380
                let height: CGFloat = 250
                
                var y: CGFloat = 50.0
                let dy: CGFloat = 50.0

                while y < height {
                    path.move(to: CGPoint(x: Double(20.0), y: Double(y)))
                    path.addLine(to: CGPoint(x: Double(20.0+width), y: Double(y)))
                    y += dy
                }
            }
            .stroke(Color(red: 64.0/255.0, green: 70.0/255.0, blue: 79.0/255.0))
            
            Path { path in
                let width: CGFloat = 380
                let height: CGFloat = 250
                
                let data = getBenchmarkData()
                var index = 0
                var x: CGFloat = 20.0
                let scaleX: CGFloat = -0.4
                let dx = width / CGFloat(data.count)
                
                for value in data {
                    let y = 0.5*height + scaleX*value*height
                    
                    if index == 0 {
                        path.move(to: CGPoint(x: Double(x), y: Double(y)))
                    }
                    else {
                        path.addLine(to: CGPoint(x: Double(x), y: Double(y)))
                    }
                    x += dx
                    index += 1
                }
                
                path.addLine(to: CGPoint(x: Double(20.0+width), y: Double(height)))
                path.addLine(to: CGPoint(x: Double(20.0), y: Double(height)))
            }
            .stroke(lineWidth: CGFloat(2.0))
            .fill(Color(red: 165.0/255.0, green: 170.0/255.0, blue: 180.0/255.0))
            
            Path { path in
                let width: CGFloat = 380
                let height: CGFloat = 250
                
                let data = getIdeaData()
                var index = 0
                var x: CGFloat = 20.0
                let scaleX: CGFloat = -0.4
                let dx = width / CGFloat(data.count)
                
                for value in data {
                    let y = 0.5*height + scaleX*value*height
                    
                    if index == 0 {
                        path.move(to: CGPoint(x: Double(x), y: Double(y)))
                    }
                    else {
                        path.addLine(to: CGPoint(x: Double(x), y: Double(y)))
                    }
                    x += dx
                    index += 1
                }
            }
            .stroke(lineWidth: CGFloat(2.0))
            .fill(Color(red: 88.0/255.0, green: 154.0/255.0, blue: 234.0/255.0))
        }
    }
    
    func getIdeaData() -> [CGFloat] {
        let data: [CGFloat] = [0.4047, 0.1849, -0.0429, -0.1447, -0.075, 0.0777, 0.1179, 0.1394, 0.2412, 0.1715, 0.1072, 0.0697, -0.0375, -0.0161, -0.0563, -0.0161, -0.0375, -0.0268, -0.0697, -0.126, -0.1126, -0.2787, -0.3645, -0.402, -0.3216, -0.343, -0.5574, -0.544, -0.611, -0.5253, -0.6593, -0.6807, -0.5092, -0.4878, -0.4342, -0.3645, -0.3216, -0.3698, -0.3859, -0.394, -0.3806, -0.4127, -0.4556, -0.3377, -0.3377, -0.402, -0.3607, -0.3859, -0.4234, -0.4502, -0.5038, -0.603, -0.5628, -0.477, -0.5253, -0.5226, -0.4931, -0.536, -0.5521, -0.5038, -0.5467, -0.4985, -0.461, -0.4663, -0.4556, -0.4234, -0.4234, -0.4234, -0.4395, -0.3645, -0.3591, -0.3672, -0.3966, -0.3538, -0.3645, -0.3672, -0.2868, -0.2734, -0.2894, -0.2787, -0.2466, -0.268, -0.2342, -0.2305, -0.2385, -0.2332, -0.193, -0.2492, -0.2573, -0.2948, -0.2626, -0.3162, -0.2894, -0.268, -0.2519, -0.2787, -0.2626, -0.276, -0.2466, -0.2519, -0.2519, -0.2734, -0.26, -0.2358, -0.2358, -0.2734, -0.193, -0.1769, -0.1662, -0.2535, -0.2439, -0.268, -0.2734, -0.3002, -0.2868, -0.3216, -0.3822, -0.3966, -0.4208, -0.3538, -0.2814, -0.2573, -0.2466, -0.2707, -0.268, -0.2412, -0.3055, -0.2573, -0.2787, -0.26, -0.2519, -0.2841, 0.3216, 0.3162, 0.2787, 0.3966, 0.4074, 0.6807, 0.461, 0.3966, 0.268, 0.3698, 0.1876, 0.1822, 0.3162, 0.4502, 0.4717, 0.4797, 0.5574, 0.5601, 0.6378, 0.4395, 0.4985, 0.402, 0.4181, 0.4556, 0.3484, 0.4395, 0.4074, 0.5414, 0.5038, 0.5306, 0.3698, 0.4127, 0.3913, 0.3377, 0.3913, 0.5038, 0.5414, 0.5789, 0.6432, 0.7182, 0.7611, 0.7557, 0.7397, 0.8254, 0.7075, 0.7504, 0.745, 0.6914, 0.7209, 0.7289, 0.6861, 0.6432, 0.6218, 0.6378, 0.6218, 0.6003, 0.3752, 0.3109, 0.2948, 0.2573, 0.2305, 0.1983, 0.2305, 0.2144, 0.1983, 0.2466, 0.2519, 0.2358, 0.1769, 0.1876, 0.1876, 0.1608, 0.1983, 0.2251, 0.2251, 0.2466, 0.3361, 0.268, 0.2948, 0.276, 0.3232, 0.2894, 0.3109, 0.2519, 0.2626, 0.3377, 0.4127, 0.4449, 0.4288, 0.4074, 0.4154, 0.3645, 0.3484, 0.2841, 0.268, 0.2734, 0.3216, 0.3672, 0.3548, 0.3377, 0.3162, 0.3109, 0.2841, 0.2358, 0.193, 0.268, 0.2251, 0.2626, 0.2975, 0.2734, 0.2734, 0.3002, 0.3216, 0.276, 0.3484, 0.3591, 0.3993, 0.3913, 0.3109, 0.3002, 0.3055, 0.268, 0.2412, 0.2466, 0.2278, 0.2734, 0.3109, 0.3966, 0.41, 0.3913, 0.2198, 0.2734]
        return data
    }
    
    func getBenchmarkData() -> [CGFloat] {
        let data: [CGFloat] = [0.4542, 0.4536, 0.4, 0.3957, 0.4261, 0.5084, 0.5586, 0.6141, 0.5793, 0.5646, 0.5586, 0.5255, 0.569, 0.5506, 0.5154, 0.6168, 0.583, 0.6051, 0.5904, 0.5007, 0.5141, 0.4893, 0.4291, 0.4241, 0.4449, 0.401, 0.3081, 0.283, 0.298, 0.3706, 0.2495, 0.2341, 0.2853, 0.3094, 0.3796, 0.378, 0.374, 0.3509, 0.3445, 0.3315, 0.2739, 0.2418, 0.2308, 0.2846, 0.2843, 0.2338, 0.2572, 0.2111, 0.1713, 0.1686, 0.1676, 0.0923, 0.1274, 0.1582, 0.1238, 0.1361, 0.1428, 0.1301, 0.1763, 0.2084, 0.2104, 0.2505, 0.2576, 0.2525, 0.2519, 0.2602, 0.2522, 0.2726, 0.28, 0.301, 0.3114, 0.3144, 0.2693, 0.2669, 0.2673, 0.2596, 0.3311, 0.3204, 0.299, 0.3037, 0.3328, 0.3214, 0.3398, 0.3495, 0.3141, 0.3412, 0.3743, 0.3699, 0.3602, 0.3308, 0.3382, 0.2351, 0.2509, 0.2746, 0.2596, 0.2432, 0.2612, 0.2933, 0.2933, 0.3455, 0.3218, 0.2887, 0.3395, 0.3348, 0.3315, 0.3418, 0.3756, 0.394, 0.4211, 0.4027, 0.4322, 0.4131, 0.3913, 0.3696, 0.4104, 0.3937, 0.3559, 0.3495, 0.3622, 0.3606, 0.3803, 0.3659, 0.3449, 0.3265, 0.3341, 0.3318, 0.3037, 0.3358, 0.2736, 0.279, 0.2763, 0.2763, 0.2111, 0.281, 0.2572, 0.287, 0.2592, 0.2492, 0.3352, 0.3007, 0.3014, 0.281, 0.281, 0.1743, 0.1565, 0.2241, 0.1579, 0.1519, 0.1753, 0.1589, 0.1609, 0.0943, 0.1097, 0.0528, 0.0284, 0.0602, -0.0237, -0.0341, -0.0345, 0.0642, 0.0575, 0.0505, 0.0485, 0.0967, 0.0906, 0.0465, 0.1478, 0.1612, 0.1569, 0.1549, 0.1488, 0.1335, 0.1495, 0.0722, 0.0508, 0.1361, 0.0418, 0.0214, 0.0043, -0.0278, -0.0539, -0.1024, -0.1094, -0.1214, -0.091, -0.1177, -0.1094, -0.199, -0.3147, -0.3659, -0.3408, -0.3355, -0.3753, -0.2933, -0.2576, -0.2836, -0.2994, -0.2576, -0.2154, -0.2211, -0.1836, -0.1893, -0.1719, -0.1452, -0.107, -0.0783, -0.102, -0.0836, -0.0074, -0.0294, -0.0147, -0.0528, -0.0518, -0.0388, -0.0472, -0.0555, -0.0448, 0.0365, 0.0686, 0.0508, 0.0361, 0.0395, 0.0512, 0.0017, 0.0375, 0.0007, 0.0368, 0.0087, 0.0485, 0.0953, 0.0709, 0.0816, 0.0796, 0.0706, 0.0455, 0.0104, 0.0248, 0.0227, 0.006, 0.0505, 0.0602, 0.0789, 0.094, 0.1174, 0.1211, 0.1197, 0.1321, 0.1445, 0.1415, 0.1512, 0.1024, 0.1124, 0.1137, 0.1197, 0.1154, 0.0933, 0.0559, 0.0502, 0.0381, 0.0468, 0.0084, -0.0147, -0.1177, -0.1167]
        return data
    }
}

struct GraphView_Preview: PreviewProvider {
    static var previews: some View {
        GraphView()
    }
}
